{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "This template creates a security configuration and launches a kerberized Amazon EMR cluster",

  "Metadata" : {
    "AWS::CloudFormation::Interface" : {
      "ParameterGroups" : [
        {
          "Label" : { "default" : "Cross-realm Trust Configuration" },
          "Parameters" : [ "DomainDNSName", "DomainAdminUser",
            "ADDomainJoinPassword", "CrossRealmTrustPrincipalPassword" ]
        },
        {
          "Label" : { "default":"Cluster Configuration" },
          "Parameters" : [ "KeyName", "ClusterSubnetID", "ClusterSecurityGroup",
            "TypeOfInstance", "InstanceCount", "AllowedCIDR", "AppsEMR", "TempS3Location"]
        },
        {
          "Label" : { "default":"EMR Kerberos Configuration" },
          "Parameters" : [ "KerberosRealm", "KerberosADdomain" ]
        }
      ],
      "ParameterLabels" : {
        "DomainDNSName" : { "default" : "Active Directory domain: " },
        "DomainAdminUser" : { "default" : "Domain admin user (joiner user): " },
        "ADDomainJoinPassword" : { "default" : "Domain admin password: " },
        "CrossRealmTrustPrincipalPassword" : { "default" : "Cross-realm trust password: " },
        "KeyName" : { "default" : "EC2 key pair name: " },
        "ClusterSubnetID" : { "default" : "Subnet ID: " },
        "ClusterSecurityGroup" : { "default" : "Security group ID: " },
        "AllowedCIDR" : { "default" : "Allowed IP address: " },
        "TypeOfInstance" : { "default" : "Instance type: " },
        "InstanceCount" : { "default" : "Instance count: " },
        "KerberosRealm" : { "default" : "EMR Kerberos realm: " },
        "KerberosADdomain" : { "default" : "Trusted AD domain: " },
        "AppsEMR" : { "default" : "EMR applications: " },
        "TempS3Location" : { "default" : "Temporary S3 Bucket Path: "}
      }
    }
  },

  "Parameters": {
    "ClusterSecurityGroup": {
      "Description": "ID of an existing security-group for the for the Amazon EMR cluster",
      "Type": "AWS::EC2::SecurityGroup::Id"
    },
    "ClusterSubnetID": {
      "Description": "ID of an existing subnet for the Amazon EMR cluster",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "AllowedCIDR": {
      "Description": "IP address range (in CIDR notation) of the client that will be allowed to connect to the cluster using SSH e.g., 203.0.113.5/32",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default" : "10.0.0.0/16",
      "ConstraintDescription" : "must be a valid CIDR range of the form x.x.x.x/x"
    },
    "KeyName": {
      "Description": "Name of an existing EC2 key pair to access the Amazon EMR cluster",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "DomainDNSName": {
      "AllowedPattern": "[a-zA-Z0-9\\-]+\\..+",
      "Default": "awsknox.com",
      "Description": "The Active Directory domain that you want to establish the cross-realm trust with e.g., awsknox.com",
      "MaxLength": "25",
      "MinLength": "3",
      "Type": "String"
    },
    "CrossRealmTrustPrincipalPassword": {
      "Description": "Password of your cross-realm trust",
      "MaxLength": "32",
      "MinLength": "5",
      "NoEcho": "true",
      "Type": "String"
    },
    "ADDomainJoinPassword": {
      "Description": "Password of the domain admin (joiner user) account",
      "NoEcho": "true",
      "Type": "String"
    },
    "DomainAdminUser": {
      "AllowedPattern": "[a-zA-Z0-9]*",
      "Default": "awsadmin",
      "Description": "User name of an AD account with computer join privileges",
      "MaxLength": "25",
      "MinLength": "5",
      "Type": "String"
    },
    "KerberosRealm": {
      "AllowedPattern": "[a-zA-Z0-9\\-]+\\..+",
      "Default": "EC2.INTERNAL",
      "Description": "Cluster's Kerberos realm name. This is usually the VPC's domain name in uppercase letters e.g. EC2.INTERNAL",
      "MaxLength": "25",
      "MinLength": "3",
      "Type": "String"
    },
    "KerberosADdomain": {
      "AllowedPattern": "[a-zA-Z0-9\\-]+\\..+",
      "Default": "AWSKNOX.COM",
      "Description": "The AD domain that you want to trust. This is the same as the AD domain name, but in uppercase letters e.g., AWSKNOX.COM",
      "MaxLength": "25",
      "MinLength": "3",
      "Type": "String"
    },
    "InstanceCount": {
      "Default": 2,
      "Description": "Number of instances (core nodes) for the cluster e.g., 2",
      "Type": "Number"
    },
    "TypeOfInstance": {
      "Description": "Instance type for the cluster nodes",
      "Type": "String",
      "Default": "m4.2xlarge",
      "AllowedValues": [
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge"
      ]
    },
    "AppsEMR": {
      "Description": "Comma separated list of applications to install on the cluster e.g., ",
      "Type": "String",
      "Default": "Hadoop, Spark, Ganglia, Hive, HBase, Livy, ZooKeeper , Hue, Oozie, Phoenix, Pig, Presto, HCatalog, Ganglia"
    },
    "TempS3Location": {
      "Description": "Temporary S3 bucket path in your AWS account. krb5.conf and knox key tab files will be uploaded from EMR master machine. These files will be downloaded from this S3 location into Knox EC2 instance.",
      "Type": "String",
      "Default": "s3://skkodali-proserv-us-west-2/knox-blog"
    }
  },

  "Resources": {

    "InboundRule": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties":{
        "IpProtocol": "tcp",
        "FromPort": "22",
        "ToPort": "22",
        "CidrIp": {
          "Ref": "AllowedCIDR"
        },
        "GroupId": {
          "Ref": "ClusterSecurityGroup"
        }
      }
    },

    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{ "Effect": "Allow", "Principal": {"Service": ["lambda.amazonaws.com"]}, "Action": ["sts:AssumeRole"] }]
        },
        "ManagedPolicyArns": [ "arn:aws:iam::aws:policy/AmazonElasticMapReduceFullAccess",
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/service-role/AWSLambdaRole"]
      }
    },

    "EmrServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{ "Effect": "Allow", "Principal": {"Service": ["elasticmapreduce.amazonaws.com"]}, "Action": ["sts:AssumeRole"] }]
        },
        "ManagedPolicyArns": [ "arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceRole"]
      }
    },

    "EmrEc2Role": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{ "Effect": "Allow", "Principal": {"Service": ["ec2.amazonaws.com"]}, "Action": ["sts:AssumeRole"] }]
        },
        "ManagedPolicyArns": [ "arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceforEC2Role"]
      }
    },

    "EMRInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          {
            "Ref": "EmrEc2Role"
          }
        ]
      }
    },

    "SecurityConfiguration": {
      "Type": "AWS::EMR::SecurityConfiguration",
      "Properties": {
        "SecurityConfiguration": {
          "AuthenticationConfiguration": {
            "KerberosConfiguration": {
              "ClusterDedicatedKdcConfiguration": {
                "CrossRealmTrustConfiguration": {
                  "Realm": {
                    "Ref": "KerberosADdomain"
                  },
                  "KdcServer": {
                    "Ref": "DomainDNSName"
                  },
                  "Domain": {
                    "Ref": "DomainDNSName"
                  },
                  "AdminServer": {
                    "Ref": "DomainDNSName"
                  }
                },
                "TicketLifetimeInHours": 24
              },
              "Provider": "ClusterDedicatedKdc"
            }
          }
        }
      }
    },

    "LaunchEMRClusterFunction": {
      "Type": "AWS::Lambda::Function",
      "DependsOn": "LambdaExecutionRole",
      "Properties": {
        "Handler": "cremr.handler",
        "Role": { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
        "Code": {
          "S3Bucket": "skkodali-proserv-us-west-2",
          "S3Key": "knox-blog/LaunchCluster.zip"
        },
        "Runtime": "python3.6",
        "Timeout": "300"
      }
    },

    "LaunchKerberizedCluster": {
      "Type": "AWS::CloudFormation::CustomResource",
      "DependsOn": "LaunchEMRClusterFunction",
      "Version": "1.0",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "LaunchEMRClusterFunction",
            "Arn"
          ]
        },
        "SignalURL": {
          "Ref": "emrCreateWaitHandle"
        },
        "loglevel": "info",
        "subnetID": {
          "Ref": "ClusterSubnetID"
        },
        "JobFlowRole": {
          "Ref": "EMRInstanceProfile"
        },
        "ServiceRole": {
          "Ref": "EmrServiceRole"
        },
        "masterSG": {
          "Ref": "ClusterSecurityGroup"
        },
        "slaveSG": {
          "Ref": "ClusterSecurityGroup"
        },
        "EMRSecurityConfig": {
          "Ref": "SecurityConfiguration"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "StackName": {
          "Ref": "AWS::StackName"
        },
        "StackRegion": {
          "Ref": "AWS::Region"
        },
        "CrossRealmPass": {
          "Ref": "CrossRealmTrustPrincipalPassword"
        },
        "ADDomainUserPassword": {
          "Ref": "ADDomainJoinPassword"
        },
        "ADDomainUser": {
          "Ref": "DomainAdminUser"
        },
        "KerberosRealm": {
          "Ref": "KerberosRealm"
        },
        "InstanceCount": {
          "Ref": "InstanceCount"
        },
        "TypeOfInstance": {
          "Ref": "TypeOfInstance"
        },
        "AppsEMR": {
          "Ref": "AppsEMR"
        },
        "TempS3Location": {
          "Ref": "TempS3Location"
        }
      }
    },

    "emrCreateWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle",
      "Properties" : {
      }
    },

    "emrWaitCondition": {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "LaunchKerberizedCluster",
      "Properties" : {
        "Handle" : { "Ref" : "emrCreateWaitHandle" },
        "Timeout" : "4500"
      }
    }
  },

  "Outputs": {
    "EMRClusterID": {
      "Value": {
        "Fn::GetAtt": ["LaunchKerberizedCluster", "ClusterID"]
      },
      "Description": "EMR cluster ID"
    },
    "EMRClusterURL" : {
      "Value" : { "Fn::GetAtt" : [ "emrWaitCondition", "Data" ]},
      "Description" : "EMR master node URL"
    }
  }
}
