{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description": "CloudFormation template for launching and configuring an AD Domain controller with a cross-realm trust.",

  "Metadata" : {
    "AWS::CloudFormation::Interface" : {
      "ParameterGroups" : [
        {
          "Label": { "default" : "Network Configuration" },
          "Parameters": [ "VPC", "Subnet", "SecurityGroup" ]
        },
        {
          "Label": { "default" : "Active Directory Configuration" },
          "Parameters": [ "ADServerNetBIOSName", "DomainDNSName", "DomainNetBIOSName",
            "DomainAdminUser", "DomainAdminPassword" ]
        },
        {
          "Label": { "default":"Amazon EC2 Configuration" },
          "Parameters": [ "KeyName", "TypeOfInstance" ]
        },
        {
          "Label": { "default":"Cross-realm Trust Configuration" },
          "Parameters": [ "KerberosRealm", "CrossRealmTrustPrincipalPassword" ]
        }
      ],
      "ParameterLabels": {
        "VPC": { "default": "VPC ID: " },
        "Subnet": { "default": "Subnet ID: " },
        "SecurityGroup": { "default": "Security group ID: " },
        "KeyName": { "default": "Key pair name: " },
        "TypeOfInstance": { "default": "Instance type: " },
        "ADServerNetBIOSName": { "default": "Domain Controller name: " },
        "DomainDNSName": { "default": "Active Directory domain: " },
        "DomainAdminUser": { "default": "Domain admin user: " },
        "DomainAdminPassword": { "default": "Domain admin password: " },
        "DomainNetBIOSName": { "default": "Domain NetBIOS name: " },
        "KerberosRealm": { "default": "EMR Kerberos realm: " },
        "CrossRealmTrustPrincipalPassword": { "default": "Cross-realm trust password: " }
      }
    }
  },

  "Mappings": {
    "AWSAMIRegionMap": {
      "AMI": {
        "WS2016": "Windows_Server-2016_Base"
      },
      "us-east-1": {
        "WS2016": "ami-4096e23a"
      },
      "us-west-2": {
        "WS2016": "ami-6b933213"
      }
    }
  },

  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 key pair to enable access to the domain controller instance",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "Subnet": {
      "Description": "ID of an existing subnet for the domain controller",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "VPC": {
      "Description": "Launch the domain controller on this VPC. NOTE: Use a new VPC that you have created for this",
      "Type": "AWS::EC2::VPC::Id"
    },
    "SecurityGroup": {
      "Description": "ID of an existing security-group for the domain controller",
      "Type": "AWS::EC2::SecurityGroup::Id"
    },
    "TypeOfInstance": {
      "Description": "Instance type for the domain controller EC2 instance",
      "Type": "String",
      "Default": "m4.xlarge",
      "AllowedValues": [
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge"
      ]
    },
    "ADServerNetBIOSName": {
      "AllowedPattern": "[a-zA-Z0-9\\-]+",
      "Default": "DC1",
      "Description": "NetBIOS (hostname) name of the Active Directory server (up to 15 characters) e.g., DC1",
      "MaxLength": "15",
      "MinLength": "1",
      "Type": "String"
    },
    "DomainDNSName": {
      "AllowedPattern": "[a-zA-Z0-9\\-]+\\..+",
      "Default": "awsknox.com",
      "Description": "Fully qualified domain name (FQDN) of the forest root domain e.g., awsknox.com",
      "MaxLength": "25",
      "MinLength": "3",
      "Type": "String"
    },
    "DomainNetBIOSName": {
      "AllowedPattern": "[a-zA-Z0-9\\-]+",
      "Default": "AWSKNOX",
      "Description": "NetBIOS name of the domain (up to 15 characters) for users of earlier versions of Windows e.g., AWSKNOX",
      "MaxLength": "15",
      "MinLength": "1",
      "Type": "String"
    },
    "DomainAdminPassword": {
      "AllowedPattern": "(?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*",
      "Description": "Password for the domain admin user. Must be at least 8 characters containing letters, numbers and symbols",
      "MaxLength": "32",
      "MinLength": "8",
      "NoEcho": "true",
      "Type": "String"
    },
    "DomainAdminUser": {
      "AllowedPattern": "[a-zA-Z0-9]*",
      "Default": "awsadmin",
      "Description": "User name for the account that will be added as Domain Administrator. This is separate from the default \"Administrator\" account",
      "MaxLength": "25",
      "MinLength": "5",
      "Type": "String"
    },
    "KerberosRealm": {
      "AllowedPattern": "[a-zA-Z0-9\\-]+\\..+",
      "Default": "EC2.INTERNAL",
      "Description": "EMR Kerberos realm name. This is usually the VPC's domain name in uppercase letters e.g. EC2.INTERNAL",
      "MaxLength": "25",
      "MinLength": "3",
      "Type": "String"
    },
    "CrossRealmTrustPrincipalPassword": {
      "Description": "Password that you want to use for your cross-realm trust",
      "MaxLength": "32",
      "MinLength": "5",
      "NoEcho": "true",
      "Type": "String"
    }
  },
  "Resources": {
    "DomainController": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "config": [
              "setup",
              "rename",
              "installADDS",
              "configureTrust",
              "finalize"
            ]
          },
          "setup": {
            "files": {
              "c:\\cfn\\scripts\\ConvertTo-EnterpriseAdmin.ps1": {
                "content": {
                  "Fn::Join": [
                    "", [
                      "[CmdletBinding()]\n",
                      "param(\n",
                      "    [string[]]\n",
                      "    [Parameter(Position=0)]\n",
                      "    $Groups = @('domain admins','schema admins','enterprise admins'),\n",
                      "\n",
                      "    [string[]]\n",
                      "    [Parameter(Mandatory=$true, Position=1)]\n",
                      "    $Members\n",
                      ")\n",
                      "\n",
                      "$Groups | ForEach-Object{\n",
                      "    Add-ADGroupMember -Identity 'domain admins' -Members $Members\n",
                      "}",
                      "\n"
                    ]
                  ]
                }
              },
              "c:\\cfn\\cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "", [
                      "[main]\n",
                      "stack=",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "\n",
                      "region=",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                }
              },
              "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "", [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.DomainController.Metadata.AWS::CloudFormation::Init\n",
                      "action=cfn-init.exe -v -c config -s ",
                      {
                        "Ref": "AWS::StackId"
                      },
                      " -r DomainController",
                      " --region ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                }
              }
            },
            "services": {
              "windows": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "c:\\cfn\\cfn-hup.conf",
                    "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },
          "rename": {
            "commands": {
              "a-execute-powershell-script-RenameComputer": {
                "command": {
                  "Fn::Join": [
                    "", [
                      "powershell.exe Rename-Computer -NewName ",
                      {
                        "Ref": "ADServerNetBIOSName"
                      },
                      " -Restart"
                    ]
                  ]
                },
                "waitAfterCompletion": "forever"
              }
            }
          },
          "installADDS": {
            "commands": {
              "1-install-prereqs": {
                "command": {
                  "Fn::Join": [
                    "", [
                      "powershell.exe -Command \"Install-windowsfeature -name AD-Domain-Services -IncludeManagementTools\""
                    ]
                  ]
                },
                "waitAfterCompletion": "0"
              },
              "2-install-adds": {
                "command": {
                  "Fn::Join": [
                    "", [
                      "powershell.exe -Command ",
                      "\"Install-ADDSForest -DomainName ",
                      {
                        "Ref": "DomainDNSName"
                      },
                      " ",
                      "-SafeModeAdministratorPassword (ConvertTo-SecureString ",
                      "'",
                      {
                        "Ref": "DomainAdminPassword"
                      },
                      "'",
                      " -AsPlainText -Force) ",
                      "-DomainMode WinThreshold ",
                      "-DomainNetbiosName ",
                      {
                        "Ref": "DomainNetBIOSName"
                      },
                      " ",
                      "-ForestMode WinThreshold ",
                      "-DatabasePath \"C:\\Windows\\NTDS\" ",
                      "-LogPath \"C:\\Windows\\NTDS\" ",
                      "-SysvolPath \"C:\\Windows\\SYSVOL\" ",
                      "-CreateDnsDelegation:$false ",
                      "-InstallDns:$true ",
                      "-NoRebootOnCompletion:$false ",
                      "-Force:$true\""
                    ]
                  ]
                },
                "waitAfterCompletion": "forever"
              },
              "3-restart-service": {
                "command": {
                  "Fn::Join": [
                    "", [
                      "powershell.exe -Command Restart-Service NetLogon -EA 0"
                    ]
                  ]
                },
                "waitAfterCompletion": "300"
              },
              "4-restart-service": {
                "command": {
                  "Fn::Join": [
                    "", [
                      "powershell.exe -Command Restart-Service ADWS"
                    ]
                  ]
                },
                "waitAfterCompletion": "300"
              },
              "5-create-ou-aws-service-accounts": {
                  "command": {
                    "Fn::Join": [
                      "", [
                        "powershell.exe -Command ",
                        "\"NEW-ADOrganizationalUnit 'awsblog-service-accounts'"
                      ]
                    ]
                  },
                  "waitAfterCompletion": "0"
              },
              "6-create-ou-aws-emr-kerberos-principals": {
                "command": {
                  "Fn::Join": [
                    "", [
                      "powershell.exe -Command ",
                      "\"NEW-ADOrganizationalUnit 'awsblog-emr-kerberos'"
                    ]
                  ]
                },
                "waitAfterCompletion": "0"
              },
              "7-create-awsadminuser":{
                "command": {
                  "Fn::Join": [
                    "", [
                      "powershell.exe -Command ",
                      "\"New-ADUser ",
                      "-Name ",
                      {
                        "Ref": "DomainAdminUser"
                      },
                      " ",
                      "-UserPrincipalName ",
                      {
                        "Ref": "DomainAdminUser"
                      },
                      "@",
                      {
                        "Ref": "DomainDNSName"
                      },
                      " ",
                      "-path 'OU=awsblog-service-accounts, DC=awsknox, DC=com'",
                      " ",
                      "-AccountPassword (ConvertTo-SecureString ",
                      "'",
                      {
                        "Ref": "DomainAdminPassword"
                      },
                      "'",
                      " -AsPlainText -Force) ",
                      "-Enabled $true ",
                      "-PasswordNeverExpires $true\""
                    ]
                  ]
                },
                "waitAfterCompletion": "0"
              },
              "6-update-adminuser": {
                "command": {
                  "Fn::Join": [
                    "", [
                      "powershell.exe -Command c:\\cfn\\scripts\\ConvertTo-EnterpriseAdmin.ps1 -Members ",
                      {
                        "Ref": "DomainAdminUser"
                      }
                    ]
                  ]
                },
                "waitAfterCompletion": "0"
              }
            }
          },
          "configureTrust": {
            "commands": {
              "a-add-kdc": {
                "command": {
                  "Fn::Join": [
                    "", [
                      "powershell.exe -Command ",
                      "\"ksetup /addkdc ",
                      {
                        "Ref": "KerberosRealm"
                      },
                      "\""
                    ]
                  ]
                },
                "waitAfterCompletion": "0"
              },
              "b-add-trust": {
                "command": {
                  "Fn::Join": [
                    "", [
                      "powershell.exe -Command ",
                      "\"netdom trust ",
                      {
                        "Ref": "KerberosRealm"
                      },
                      " ",
                      "/Domain:",
                      {
                        "Ref": "DomainDNSName"
                      },
                      " ",
                      "/add /realm /passwordt:",
                      {
                        "Ref": "CrossRealmTrustPrincipalPassword"
                      },
                      "\""
                    ]
                  ]
                },
                "waitAfterCompletion": "0"
              },
              "c-add-enckeys": {
                "command": {
                  "Fn::Join": [
                    "", [
                      "powershell.exe -Command ",
                      "\"ksetup /SetEncTypeAttr ",
                      {
                        "Ref": "KerberosRealm"
                      },
                      " ",
                      "AES256-CTS-HMAC-SHA1-96\""
                    ]
                  ]
                },
                "waitAfterCompletion": "0"
              }
            }
          },
          "finalize": {
            "commands": {
              "a-signal-success": {
                "command": {
                  "Fn::Join": [
                    "", [
                      "cfn-signal.exe -e 0 \"",
                      {
                        "Ref": "DomainControllerWaitHandle"
                      },
                      "\""
                    ]
                  ]
                }
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "AWSAMIRegionMap",
            {
              "Ref": "AWS::Region"
            },
            "WS2016"
          ]
        },
        "InstanceType": { "Ref": "TypeOfInstance" },
        "Tags" : [
          {
            "Key" : "Name",
            "Value" : { "Ref": "ADServerNetBIOSName" }
          }
        ],
        "SubnetId": {
          "Ref": "Subnet"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "SecurityGroupIds": [{
          "Ref": "SecurityGroup"
        }],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "", [
                "<script>\n",
                "cfn-init.exe -v -c config -s ",
                {
                  "Ref": "AWS::StackId"
                },
                " -r DomainController",
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "</script>\n"
              ]
            ]
          }
        }
      }
    },
    "DomainControllerWaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle"
    },
    "DomainControllerWaitCondition": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "DomainController",
      "Properties": {
        "Handle": {
          "Ref": "DomainControllerWaitHandle"
        },
        "Timeout": "3600"
      }
    },
    "DHCPOptions": {
      "Type": "AWS::EC2::DHCPOptions",
      "DependsOn": [
        "DomainControllerWaitCondition"
      ],
      "Properties": {
        "DomainName": "ec2.internal",
        "DomainNameServers": [
          { "Fn::GetAtt" : [ "DomainController", "PrivateIp" ] }
        ],
        "Tags": [{
          "Key": "Domain",
          "Value": {
            "Ref": "DomainDNSName"
          }
        }]
      }
    },
    "VPCDHCPOptionsAssociation": {
      "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "DhcpOptionsId": {
          "Ref": "DHCPOptions"
        }
      }
    }
  },
  "Outputs": {
    "Domain": {
      "Description": "The DomainDNSName",
      "Value": {
        "Ref": "DomainDNSName"
      }
    },
    "Realm": {
      "Description": "The KerberosRealm",
      "Value": {
        "Ref": "KerberosRealm"
      }
    },
    "AdminServer": {
      "Description": "The DomainDNSName",
      "Value": {
        "Ref": "DomainDNSName"
      }
    },
    "KdcServer": {
      "Description": "The DomainDNSName",
      "Value": {
        "Ref": "DomainDNSName"
      }
    },
    "ADDomainJoinUser": {
      "Description": "The DomainAdminUser",
      "Value": {
        "Ref": "DomainAdminUser"
      }
    }
  }
}
